<h1>SpringBoot使用Junit单元<a href="https://blog.csdn.net/weixin_39800144/article/details/79241620">测试</a></h1>

<h2>1.pom.xml</h2>

<p>一般使用idea新建一个SpringBoot web项目时，一般都会自动引入此依赖，如果没有，请手动引入。</p>

<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;dependency&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;scope&gt;test&lt;/scope&gt;<br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;/dependency&gt;</p>

<h2>2.测试类基类</h2>

<p>新建的项目，一般会有test包和test类，结构如下：</p>

<p>如果没有，我们自己创建一个，由于一个项目中我们会写很多很多测试类，而测试类上面是需要以下几个注解的，每建一个类都去补注解，太麻烦，我们就在这个类中加上注解，其他测试类直接继承这个类就好了：</p>

<p>package com.alibaba;<br />
<br />
import org.junit.After;<br />
import org.junit.Before;<br />
import org.junit.runner.RunWith;<br />
import org.springframework.boot.test.context.SpringBootTest;<br />
import org.springframework.test.context.junit4.SpringRunner;<br />
import org.springframework.test.context.web.WebAppConfiguration;<br />
&nbsp;<br />
@RunWith(SpringRunner.class)<br />
@SpringBootTest<br />
//由于是Web项目，Junit需要模拟ServletContext，因此我们需要给我们的测试类加上@WebAppConfiguration。<br />
@WebAppConfiguration<br />
public class TmallApplicationTests {<br />
&nbsp;<br />
&nbsp; &nbsp; @Before<br />
&nbsp; &nbsp; public void init() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;开始测试-----------------&quot;);<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; @After<br />
&nbsp; &nbsp; public void after() {<br />
&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;测试结束-----------------&quot;);<br />
&nbsp; &nbsp; }<br />
}</p>

<h2>3.controller，service，dao等，省略，就是普通方法，普通接口</h2>

<h2>4.测试类</h2>

<p>我这里建一个测试类，继承基类，然后测试我service中的两个方法</p>

<p>package com.alibaba;<br />
&nbsp;<br />
import com.alibaba.service.EntFileService;<br />
import org.junit.Assert;<br />
import org.junit.Test;<br />
import org.springframework.beans.factory.annotation.Autowired;<br />
&nbsp;<br />
/**<br />
&nbsp;* Created by lightClouds917<br />
&nbsp;* Date 2018/2/2<br />
&nbsp;* Description:测试类<br />
&nbsp;*/<br />
public class EntFileTest extends TmallApplicationTests {<br />
&nbsp;<br />
&nbsp;<br />
&nbsp; &nbsp; @Autowired<br />
&nbsp; &nbsp; private EntFileService entFileService;<br />
&nbsp; &nbsp; //@Ignore(&quot;not ready yet&quot;)<br />
&nbsp; &nbsp; @Test<br />
&nbsp; &nbsp; public void testGetEntFileById(){<br />
&nbsp; &nbsp; &nbsp; &nbsp; Assert.assertSame(&quot;企业数量有误&quot;,500,entFileService.getCount());<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; @Test<br />
&nbsp; &nbsp; public void testGetEntFileList(){<br />
&nbsp; &nbsp; &nbsp; &nbsp; Assert.assertSame(&quot;企业数量不为10&quot;,10,entFileService.getEntFileList());<br />
&nbsp; &nbsp; }<br />
}<br />
如上，直接@Autowired引入你想测试的类就好，然后继承基类，测试方法上面要加@Test注解。<br />
然后，第一个测试方法：我想测试一下企业数量是不是600，参数意义：</p>

<p>第一个参数：如果测试不通过，会抛出此消息，此参数可不要；</p>

<p>第二个参数：我预期的值，我这里希望他查出来的结果是600；</p>

<p>第三个参数：是实际的结果，就是我们调用方法返回的结果；</p>

<p>我们可以看一下Assert类的源码：</p>

<p><br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* Asserts that two objects refer to the same object. If they are not, an<br />
&nbsp; &nbsp; &nbsp;* {@link AssertionError} is thrown with the given message.<br />
&nbsp; &nbsp; &nbsp;*<br />
&nbsp; &nbsp; &nbsp;* @param message the identifying message for the {@link AssertionError} (&lt;code&gt;null&lt;/code&gt;<br />
&nbsp; &nbsp; &nbsp;* okay)<br />
&nbsp; &nbsp; &nbsp;* @param expected the expected object<br />
&nbsp; &nbsp; &nbsp;* @param actual the object to compare to &lt;code&gt;expected&lt;/code&gt;<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; static public void assertSame(String message, Object expected, Object actual) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; if (expected == actual) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;<br />
&nbsp; &nbsp; &nbsp; &nbsp; }<br />
&nbsp; &nbsp; &nbsp; &nbsp; failNotSame(message, expected, actual);<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; /**<br />
&nbsp; &nbsp; &nbsp;* Asserts that two objects refer to the same object. If they are not the<br />
&nbsp; &nbsp; &nbsp;* same, an {@link AssertionError} without a message is thrown.<br />
&nbsp; &nbsp; &nbsp;*<br />
&nbsp; &nbsp; &nbsp;* @param expected the expected object<br />
&nbsp; &nbsp; &nbsp;* @param actual the object to compare to &lt;code&gt;expected&lt;/code&gt;<br />
&nbsp; &nbsp; &nbsp;*/<br />
&nbsp; &nbsp; static public void assertSame(Object expected, Object actual) {<br />
&nbsp; &nbsp; &nbsp; &nbsp; assertSame(null, expected, actual);<br />
&nbsp; &nbsp; }</p>

<h2>5.运行测试用例</h2>

<p>运行有两种方法：</p>

<p>1.选中方法，右键，然后run 。。。；</p>

<p>2.点击方法前的小标；</p>

<p>具体操作如下截图：</p>

<p>现在看运行结果，如下图：</p>

<p>区块一：这里是测试用例的执行结果，由于未获得预期结果，打印出了我们提前设置的错误信息。</p>

<p>区块二：这是测试用例的覆盖率，类的覆盖，方法的覆盖，行数的覆盖，非常详细。</p>

<p>区块三：此区块是预期结果和实际结果的详细对比，点击后才会显示，如图点击位置。</p>

<p>关于Assert中，还有很多断言方法，方法名字很规范，看名字就知道怎么用了，这里不再过多说明。</p>

<h2>6.打包测试</h2>

<p>项目开发完后，我们写了100个测试用例类，我不能每个类都点击进去，然后慢慢执行，SpringBoot提供了打包测试的方式：我们用一个类，把所有的测试类整理进去，然后直接运行这个类，所有的测试类都会执行。</p>

<p>我这里建了两个测试类，分别是EntFileTest,EntFileTest2，现在我打包进TestSuits，让他们一次运行：</p>

<p>@Suite.SuiteClasses({EntFileTest.class,EntFileTest2.class})</p>

<p><br />
打包完整代码：</p>

<p>package com.alibaba;<br />
&nbsp;<br />
import org.junit.runner.RunWith;<br />
import org.junit.runners.Suite;<br />
&nbsp;<br />
/**<br />
&nbsp;* Created by lightClouds917<br />
&nbsp;* Date 2018/2/2<br />
&nbsp;* Description:打包测试<br />
&nbsp;*/<br />
//@Ignore(&quot;not ready yet&quot;)<br />
@RunWith(Suite.class)<br />
@Suite.SuiteClasses({EntFileTest.class,EntFileTest2.class})<br />
public class TestSuits {<br />
&nbsp;<br />
&nbsp; &nbsp; //不用写代码，只需要注解即可<br />
}</p>

<p>7.忽略方法</p>

<p>当我一个测试类写了10个测试方法时，其中有1个我暂时不想测，想跳过，但是其他9个我想一次运行，怎么办？这里有一个忽略注解，写在方法上，可以忽略这个测试方法，写在类上，可以忽略这个类。</p>

<p>package com.alibaba;<br />
&nbsp;<br />
import com.alibaba.service.EntFileService;<br />
import org.junit.Assert;<br />
import org.junit.Ignore;<br />
import org.junit.Test;<br />
import org.springframework.beans.factory.annotation.Autowired;<br />
&nbsp;<br />
/**<br />
&nbsp;* Created by lightClouds917<br />
&nbsp;* Date 2018/2/2<br />
&nbsp;* Description:测试类<br />
&nbsp;*/<br />
public class EntFileTest extends TmallApplicationTests {<br />
&nbsp;<br />
&nbsp;<br />
&nbsp; &nbsp; @Autowired<br />
&nbsp; &nbsp; private EntFileService entFileService;<br />
&nbsp;<br />
&nbsp; &nbsp; @Ignore(&quot;not ready yet&quot;)<br />
&nbsp; &nbsp; @Test<br />
&nbsp; &nbsp; public void testGetEntFileById(){<br />
&nbsp; &nbsp; &nbsp; &nbsp; Assert.assertSame(&quot;企业数量有误&quot;,600,entFileService.getCount());<br />
&nbsp; &nbsp; }<br />
&nbsp;<br />
&nbsp; &nbsp; @Test<br />
&nbsp; &nbsp; public void testGetEntFileList(){<br />
&nbsp; &nbsp; &nbsp; &nbsp; Assert.assertSame(&quot;企业数量不为10&quot;,10,entFileService.getEntFileList());<br />
&nbsp; &nbsp; }<br />
}<br />
此时，运行这个测试类，testGetEntFileById（）方法就会忽略执行。</p>

<p>&nbsp;</p>
