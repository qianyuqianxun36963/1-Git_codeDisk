<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
  			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc.xsd
       		http://www.springframework.org/schema/context
       		http://www.springframework.org/schema/context/spring-context.xsd
       		http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd"
	default-lazy-init="true">
	
	<!-- 本文档不做实际使用，综合记录所以配置使用情形。 -->

	<!-- 通过mvc:resources设置静态资源，这样servlet就会处理这些静态资源，而不通过控制器 -->
	<!-- 设置不过滤内容，比如:css,jquery,img 等资源文件 -->
	<mvc:resources location="/" mapping="/**/*.html"/> 
	<mvc:resources location="/" mapping="/**/*.css"/>
	<mvc:resources location="/" mapping="/**/*.js"/>
	<mvc:resources location="/images/*" mapping="/images/**" />
	<mvc:resources location="/" mapping="/**/*.png"/>
    <mvc:resources location="/" mapping="/**/*.gif"/>
	
	<!-- mvc:view-controller可以在不需要Controller处理request的情况，转向到设置的View -->
	<!-- 像下面这样设置，如果请求为/，则不通过controller，而直接解析为/index.jsp -->
	<mvc:view-controller path="/" view-name="index" />
	
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
		<!-- 配置jsp路径前缀 -->
		<property name="prefix" value="/"></property>
		<!-- 配置URl后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
	<aop:aspectj-autoproxy  proxy-target-class="true" />
	
	<!--
		对web包中的所有注解的(@Controller,@Repository,@Component)类进行扫描，
	             以完成Bean创建和自动依赖注入的功能,同时开启注解功能替代了:<context:annotation-config />
	             可以直接使用:@Autowired @Resource @Required 等注解,
	             
	     @Service,此处并没有扫描,所有的事务处理都是以切面的形式添加在Service层,Spring的Context是父子
	               容器,如果都扫描的话，此时Service层还没有进行事务加强处理，会导致事务失效，所以此处扫描除Service
	               以外的所有注解Bean
	-->
    <context:component-scan base-package="com.wh.eas.manage.controller" use-default-filters="true">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
    </context:component-scan>
    
    <mvc:annotation-driven>
		<!-- @ResponseBody(3.2以后 @RestController) 返回JSON对象支持  -->
		<mvc:message-converters>
			<ref bean="stringHttpMessageConverter" />
			<ref bean="MappingJacksonHttpMessageConverter" />
			<!-- <ref bean="marshallingHttpMessageConverter" />  -->
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg value="UTF-8" index="0"></constructor-arg>
		<!-- 避免出现乱码 -->
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<bean id = "MappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
			<property name="supportedMediaTypes">
				<list>
					<value>text/html;charset=UTF-8</value>
					<value>application/x-www-form-urlencoded;charset=UTF-8</value>
					<value>text/plain;charset=utf-8</value>
					<!-- 避免IE 出现下载JSON文件的情况 -->
					<value>application/json;charset=UTF-8</value>
				</list>
			</property>
	</bean>

    <!-- 
    <mvc:resources mapping="/**" location="/"/>
    -->
    <mvc:resources location="/static/" mapping="/static/**"></mvc:resources>
    
    <!-- ===================================================== -->
    <!-- ViewResolver For FreeMarker -->
    <!-- ===================================================== -->
    <bean id="freemarkerResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
    	<!-- 
    		此处为视图解析的执行顺序,order 值越小  执行越优先 
    		此处需要放在 其他视图解析之前执行
    	 -->
        <property name="order" value="1" />
        <property name="viewNames" value="*.ftl" />
        <property name="suffix" value="" />
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="requestContextAttribute" value="request" />
        <property name="viewClass">
            <value>org.springframework.web.servlet.view.freemarker.FreeMarkerView</value>
        </property>
    </bean>
    <!-- ===================================================== -->
    <!-- ViewResolver For FreeMarkerConfigurer -->
    <!-- ===================================================== -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath">
            <value>/views/</value>
        </property>
        <property name="defaultEncoding" value="UTF-8" />
        <property name="freemarkerSettings"><!-- 设置FreeMarker环境属性 -->
            <props>
                <prop key="template_update_delay">5</prop><!--刷新模板的周期，单位为秒 -->
                <prop key="default_encoding">UTF-8</prop><!--模板的编码格式 -->
                <prop key="locale">UTF-8</prop><!-- 本地化设置 -->
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="number_format">0.####</prop>
                <prop key="boolean_format">true,false</prop>
                <prop key="whitespace_stripping">true</prop>
                <prop key="tag_syntax">auto_detect</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
                <!-- 配置自定义的freemarker异常处理-->
                <prop key = "template_exception_handler">com.wh.eas.manage.base.exception.FreemarkerExceptionHandler</prop>
            </props>
        </property>
    </bean>
    
    <!-- JSP/HtML 视图名称解析 模型视图名称的解析，即在模型视图名称添加前后缀 通用解析器-->
	<bean id = "jspHtmlViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 
			视图解析的执行顺序 此处 JSP HTML 的视图解析一定要放在FTL的后面,因为 InternalResourceViewResolver的
			buildView方法，该方法一定会创建一个View;所以View永远不为null（即使该JSP不存在）
		-->
		<property name="order" value="2" />
		<!-- 该属性表示 以html和jsp结尾的视图都将由这个视图解析器处理 -->
		<property name="viewNames" value="*.html,*.jsp" />
		<property name="prefix" value="/views/"/>
		<property name="suffix" value = ""></property>
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.InternalResourceView</value>
		</property>
	</bean>
    

	<!-- 配置multipartresolver,注意：id名必须这样写，不然会报错  ajax表单提交 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxInMemorySize" value="10240000"></property>
    </bean>
	
	
</beans>